#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

###############################################################################
# BigData storage configuration
###############################################################################

titan.storage.backend.description = Full class name of the StorageManager implementation defining the \
  storage backend to be used for persistence or one of the following pre-defined storage backends: cassandra, \
  hbase, hazelcastcache, persistit, berkeleyje
titan.storage.backend.type = java.lang.String

titan.storage.directory.description = Storage directory for those storage backends that require local storage
titan.storage.directory.type = java.lang.String

titan.storage.read-only.description = Specifies whether write operations are supported on the graph
titan.storage.read-only.type = java.lang.Boolean

titan.storage.batch-loading.description = Enables batch loading which improves write performance but assumes that only \
  one thread is interacting with the graph and that vertices retrieved by id exist. Under these assumptions locking \
  and some read operations can be avoided. Furthermore, the configured storage backend will make backend specific \
  configurations that facilitate loading performance. Careful: enabling batch loading when the assumptions are \
  violated can result in an inconsistent or partially corrupt graph. We strongly suggest to disable automatic type creation.
titan.storage.batch-loading.type = java.lang.Boolean

titan.storage.buffer-size.description = Buffers graph mutations locally up to the specified number before persisting \
  them against the storage backend. Set to 0 to disable buffering. Buffering is disabled automatically if the storage \
  backend does not support buffered mutations.
titan.storage.buffer-size.type = java.lang.Integer(128|0|*)

titan.storage.write-attempts.description = Number of times the database attempts to persist the transactional state to \
  the storage layer.
titan.storage.write-attempts.type = java.lang.Integer(1|0|*)

titan.storage.read-attempts.description =  Number of times the database attempts to execute a read operation against \
  the storage layer in the current transaction.
titan.storage.read-attempts.type = java.lang.Integer(1|0|*)

titan.storage.attempt-wait.description = Time in milliseconds that Titan waits after an unsuccessful storage attempt \
  before retrying.
titan.storage.attempt-wait.type = java.lang.Integer(50|0|*)

titan.storage.page-size.description = Number of results to pull over the wire when iterating over a distributed \
  storage backend.
titan.storage.page-size.type = java.lang.Integer(100|0|*)

titan.storage.username.description = Username to authenticate access to the storage backend (if necessary)
titan.storage.username.type = java.lang.String

titan.storage.password.description = Password to authenticate access to the storage backend (if necessary)
titan.storage.password.type = java.lang.String("password")

titan.cache.db-cache.description = Enables the database level cache
titan.cache.db-cache.type = java.lang.Boolean

titan.cache.db-cache-size.description = The size of the database level cache. If this value is >0.0 and <1.0 then it \
  is interpreted as a percentage of the total heap space available to the JVM Titan is running in. If this value is \
  bigger than 1.0 it is interpreted as an absolute size in bytes.
titan.cache.db-cache-size.type = java.lang.Double

titan.cache.db-cache-time.description = The default expiration time in milliseconds for elements held in the database \
  level cache. This is the time period before Titan will check against storage backend for a newer results. Setting \
  this value to 0 will cache elements forever (unless they get evicted due to space constraints or modifications).
titan.cache.db-cache-time.type = java.lang.Integer(1000|0|*)

titan.cache.db-cache-clean-wait.description = How long (in milliseconds) the database level cache will keep keys \
  expired while the mutations that triggered the expiration are being persisted. This value should be larger than the \
  time it takes for persisted mutations to become visible. This setting only ever makes sense for distributed storage \
  backends where writes may be accepted but are not immediately readable.
titan.cache.db-cache-clean-wait.type = java.lang.Integer(10|0|*)

titan.ids.block-size.description = Size of the id block to be acquired. Larger block sizes require fewer block \
  applications but also leave a larger fraction of the id pool occupied and potentially lost. For write heavy \
  applications, larger block sizes should be chosen.
titan.ids.block-size.type = java.lang.Integer(1000|0|*)

titan.ids.flush.description = If flush ids is enabled, vertices and edges are assigned ids immediately upon creation. \
  If not, then ids are only assigned when the transaction is committed.
titan.ids.flush.type = java.lang.Boolean

titan.ids.renew-timeout.description = Number of milliseconds Titanâ€™s id pool manager will wait while attempting to \
  acquire a new id block before failing.
titan.ids.renew-timeout.type = java.lang.Integer(1000|0|*)

titan.ids.renew-percentage.description = Threshold percentage of ids left in the pool before Titanâ€™s id pool manager \
  starts acquiring a new id block. A smaller percentage reduces potential id waste but can lead to delays when the \
  current id block is exhausted.
titan.ids.renew-percentage.type = java.lang.Double

titan.storage.machine-id.description = A unique identifier (hexadecimal number) for the machine running the \
  TitanGraph instance. Ensures that no other machine accessing the storage backend can have the same identifier.
titan.storage.machine-id.type = java.lang.String

titan.storage.machine-id-appendix.description = A locally unique identifier for a particular TitanGraph instance. This \
  only needs to be configured when multiple TitanGraph instances are running on the same machine. A unique machine \
  specific appendix guarantees a globally unique identifier.
titan.storage.machine-id-appendix.type = java.lang.Integer(1|0|*)

titan.storage.lock-wait-time.description = The number of milliseconds the system waits for a lock application to be \
  acknowledged by the storage backend. Also, the time waited at the end of all lock applications before verifying that \
  the applications were successful. This value should be a small multiple of the average consistent write time.
titan.storage.lock-wait-time.type = java.lang.Integer(10|0|*)

titan.storage.lock-retries.description = Number of times the system attempts to acquire a lock before giving up and \
  throwing an exception.
titan.storage.lock-retries.type = java.lang.Integer(1|0|*)

titan.storage.lock-expiry-time.description = Number of milliseconds after which a lock is considered to have expired. \
  Lock applications that were not released are considered expired after this time and released. This value should be \
  larger than the maximum time a transaction can take in order to guarantee that no correctly held applications are \
  expired pre-maturely and as small as possible to avoid dead lock.
titan.storage.lock-expiry-time.type = java.lang.Integer(10000|0|*)

titan.storage.idauthority-wait-time.description = The number of milliseconds the system waits for an id block \
  application to be acknowledged by the storage backend. Also, the time waited after the application before verifying \
  that the application was successful.
titan.storage.idauthority-wait-time.type = java.lang.Integer(10|0|*)

titan.storage.idauthority-retries.description = Number of times the system attempts to acquire a unique id block before \
  giving up and throwing an exception.
titan.storage.idauthority-retries.type = java.lang.Integer(1|0|*)

titan.storage.setup-wait.description = When Titan is started, it will attempt to communicate with the storage backend. \
  If the backend cluster is in the process of starting up or otherwise not yet fully available, Titan will repeatedly \
  re-attempt communication and wait for this long before failing.
titan.storage.setup-wait.type = java.lang.Integer(10000|0|*)

titan.autotype.description = Specifies the factory to use when automatically creating types. See Default Type Creation \
  for more details. Set to none to disable automatic type creation
titan.autotype.type = java.lang.Enum("blueprints"|"none")

titan.tx-cache-size.description = The maximum number of vertices to hold in the transaction local cache. Each \
  transaction maintains a cache of up to this size. Larger cache size means possibly faster transactions while \
  consuming more memory
titan.tx-cache-size.type = java.lang.Integer(1000|0|*)

titan.fast-property.description = Whether all properties should be pre-fetched for a vertex with the first property \
  lookup on that vertex. Significantly speeds up multiple property retrievals. Disable on graphs with vertices that \
  have lots of properties.
titan.fast-property.type = java.lang.Boolean