#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements. See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership. The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Security over SOLR services: we allow local updates and updates by users
# who have the "manager" role, and deny all other access

# a security rule to allow SOLR updates from localhost
security.permission.solr_local_update.pattern=/solr/.*/update
security.permission.solr_local_update.host=LOCAL
security.permission.solr_local_update.methods=GET,POST,PUT
security.permission.solr_local_update.priority=5

# a security rule to allow SOLR selects from localhost
security.permission.solr_local_select.pattern=/solr/.*/select
security.permission.solr_local_select.host=LOCAL
security.permission.solr_local_select.methods=GET
security.permission.solr_local_select.priority=5

# a security rule to allow SOLR admin from localhost
security.permission.solr_local_admin.pattern=/solr/admin/.*
security.permission.solr_local_admin.host=LOCAL
security.permission.solr_local_admin.methods=GET,POST,PUT,DELETE
security.permission.solr_local_admin.priority=5

# a security rule to allow SOLR updates from localhost
security.permission.solr_remote_update.pattern=/solr/.*/update
security.permission.solr_remote_update.roles=manager
security.permission.solr_remote_update.methods=GET,POST,PUT
security.permission.solr_remote_update.priority=3

# a security rule to allow SOLR admin from localhost
security.permission.solr_remote_admin.pattern=/solr/admin/.*
security.permission.solr_remote_admin.roles=manager
security.permission.solr_remote_admin.methods=GET,POST,PUT,DELETE
security.permission.solr_remote_admin.priority=3

# a security rule to restrict all other accesses to SOLR update
security.restriction.solr_remote_update.pattern=/solr/.*/update
security.restriction.solr_remote_update.methods=GET,POST,PUT
security.restriction.solr_remote_update.priority=2

# a security rule to restrict all other accesses to SOLR admin
security.restriction.solr_remote_admin.pattern=/solr/admin/.*
security.restriction.solr_remote_admin.methods=GET,POST,PUT,DELETE
security.restriction.solr_remote_admin.priority=2


# Security over configuration services: we allow updating for all 
# users in the management role, reading for everyone login

# a security rule to restrict all access to updating configuration to the "manager" role (configured in the container)
security.permission.config.pattern=/config/.*
security.permission.config.methods=GET,HEAD,OPTIONS,POST,PUT,DELETE
security.permission.config.roles=manager
security.permission.config.priority=5

# restrict all other updates
security.restriction.config_update.pattern=/config/.*
security.restriction.config_update.methods=POST,PUT,DELETE
security.restriction.config_update.priority=4

# allow reading the configuration
security.permission.config_read.pattern=/config/.*
security.permission.config_read.methods=GET
security.permission.config_read.host=LOCAL
security.permission.config_read.priority=2

# allow /system admin from managers
security.permission.system.pattern=/system/.*
security.permission.system.roles=manager
security.permission.system.methods=GET,POST,PUT,DELETE
security.permission.system.priority=5

# deny /system admin from anyone else
security.restriction.system.pattern=/system/.*
security.restriction.system.methods=GET,POST,PUT,DELETE
security.restriction.system.priority=4

# allow /security admin from managers
security.permission.security.pattern=/security/.*
security.permission.security.roles=manager
security.permission.security.methods=GET,POST,PUT,DELETE
security.permission.security.priority=5

# deny /security admin from anyone else
security.restriction.security.pattern=/security/.*
security.restriction.security.methods=GET,POST,PUT,DELETE
security.restriction.security.priority=4



# allow /transaction admin from editors
security.permission.transaction.pattern=/transaction/.*
security.permission.transaction.roles=editor
security.permission.transaction.methods=GET,POST,PUT,DELETE
security.permission.transaction.priority=5

# deny /transaction admin from anyone else
security.restriction.transaction.pattern=/transaction/.*
security.restriction.transaction.methods=GET,POST,PUT,DELETE
security.restriction.transaction.priority=4

# a security rule to allow /groovy admin by managers
security.permission.groovy.pattern=/groovy/.*
security.permission.groovy.roles=manager
security.permission.groovy.methods=GET,POST,PUT,DELETE
security.permission.groovy.priority=5

# deny /groovy admin from anyone else
security.restriction.groovy.pattern=/groovy/.*
security.restriction.groovy.methods=GET,POST,PUT,DELETE
security.restriction.groovy.priority=4

# allow H2 console from managers
security.permission.database.pattern=/database/.*
security.permission.database.roles=manager
security.permission.database.methods=GET,POST,PUT,DELETE
security.permission.database.priority=5

# deny H2 console from aanyone else
security.restriction.database.pattern=/database/.*
security.restriction.database.methods=GET,POST,PUT,DELETE
security.restriction.database.priority=4


# restrict updating reasoning programs to the "manager" role
security.permission.reasoner_update.pattern=/reasoner/.*
security.permission.reasoner_update.methods=POST,PUT,DELETE
security.permission.reasoner_update.roles=manager
security.permission.reasoner_update.priority=5

# restrict all other updates
security.restriction.reasoner_update.pattern=/reasoner/.*
security.restriction.reasoner_update.methods=POST,PUT,DELETE
security.restriction.reasoner_update.priority=4

# allow reading the configuration
security.permission.reasoner_read.pattern=/reasoner/.*
security.permission.reasoner_read.methods=GET
security.permission.reasoner_read.priority=4


# allow importing by editors, allow anyone else to see the status of imports
security.permission.core_importers.pattern=/import/.*
security.permission.core_importers.roles=editor
security.permission.core_importers.methods=POST,PUT,DELETE
security.permission.core_importers.priority=5

security.permission.core_importers_read.pattern=/import/.*
security.permission.core_importers_read.methods=GET
security.permission.core_importers_read.priority=4

security.restriction.core_importers.pattern=/import/.*
security.restriction.core_importers.methods=POST,PUT,DELETE
security.restriction.core_importers.priority=4


# restrict access to Social Media importers to editors
security.permission.social_importers.pattern=/social/.*/import/.*
security.permission.social_importers.roles=editor
security.permission.social_importers.methods=GET,POST,PUT,DELETE
security.permission.social_importers.priority=5

security.restriction.social_importers.pattern=/social/.*/import/.*
security.restriction.social_importers.methods=GET,POST,PUT,DELETE
security.restriction.social_importers.priority=4

# Security over SPARQL services:
# - allow querying by anyone
# - restrict updating to users in the "editor" role

# allow SPARQL queries for anyone
security.permission.sparql_query.pattern=/sparql/select
security.permission.sparql_query.methods=GET,POST,OPTIONS
security.permission.sparql_query.priority=5

# allow SPARQL updates for "editor" role
security.permission.sparql_update.pattern=/sparql/update
security.permission.sparql_update.methods=GET,POST,OPTIONS
security.permission.sparql_update.roles=editor
security.permission.sparql_update.priority=5

# restrict any other access to SPARQL updates
security.restriction.sparql_update.pattern=/sparql/update
security.restriction.sparql_update.methods=GET,POST,OPTIONS
security.restriction.sparql_update.priority=4

# Security over context services:
# - allow querying by anyone
# - restrict updating to users in the "editor" role

# allow request for anyone
security.permission.context_read.pattern=/context/.*
security.permission.context_read.methods=GET,HEAD,OPTIONS
security.permission.context_read.priority=5

# allow updates for "editor" role
security.permission.context_write.pattern=/context/.*
security.permission.context_write.methods=POST,DELETE
security.permission.context_write.roles=editor
security.permission.context_write.priority=5

# restrict any other access to update contexts
security.restriction.context.pattern=/context/.*
security.restriction.context.methods=POST,DELETE
security.restriction.context.priority=4

# Security over resource, content and metadata services:
# - allow reading by anyone
# - restrict resource-based updating to users in the editor role

# allow read access to anyone
security.permission.resource_read.pattern=/(resource|content|meta)/.*
security.permission.resource_read.methods=GET,HEAD
security.permission.resource_read.priority=5

# allow updating by users in the editor role
security.permission.resource_write.pattern=/(resource|content|meta)/.*
security.permission.resource_write.methods=POST,PUT,DELETE
security.permission.resource_write.roles=editor
security.permission.resource_write.priority=5

# restrict updates from anyone else
security.restriction.resource_write.pattern=/(resource|content|meta)/.*
security.restriction.resource_write.methods=POST,PUT,DELETE
security.restriction.resource_write.priority=4


# a security rule to restrict all POST/PUT/DELETE access to the system to the "manager" role
security.permission.default_write.pattern=/.*
security.permission.default_write.methods=POST,PUT,DELETE
security.permission.default_write.roles=manager,editor
security.permission.default_write.priority=1

# a security rule to allow all GET access to the system for registered users
security.permission.default_read.pattern=/.*
security.permission.default_read.methods=GET,OPTIONS,HEAD
security.permission.default_read.roles=user
security.permission.default_read.priority=1

