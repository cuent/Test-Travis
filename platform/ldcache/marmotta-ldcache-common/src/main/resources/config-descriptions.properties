#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements. See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership. The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

###############################################################################
# LMF LD caching configuration
###############################################################################

ldcache.enabled.description = enable/disable automatic caching of remote resources from the Linked Data Cloud; \
  enabling leads to many HTTP requests when querying and should be considered with care
ldcache.enabled.type = java.lang.Boolean

ldcache.expiry.description = default expiry time in seconds if not otherwise given (default: 1 day)
ldcache.expiry.type = java.lang.Integer(3600|0)

ldcache.minexpiry.description = minimum expiry time before which a resource is refreshed from the linked data cloud \
  (use to avoid too short expiry times returned by servers)
ldcache.minexpiry.type = java.lang.Integer(60|0)

ldcache.so_timeout.description = how long to wait in ms when no data is sent over a connection
ldcache.so_timeout.type = java.lang.Integer(1000|1000)

ldcache.connection_timeout.description = how long to wait in ms until a connection is established
ldcache.connection_timeout.type = java.lang.Integer(1000|1000)

ldcache.max_parallel_requests.description = how many http retrievals to run at most in parallel
ldcache.max_parallel_requests.type = java.lang.Integer(1|1|100)